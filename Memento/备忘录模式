
备忘录模式(Memento Pattern)：在不破坏封装的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态，
							这样可以在以后将对象恢复到原先保存的状态。它是一种对象行为型模式，其别名为Token。
							
 备忘录模式的核心是备忘录类以及用于管理备忘录的负责人类的设计							
							
Originator（原发器）：一般将需要保存内部状态的类设计为原发器。							
							
Memento（备忘录)：存储原发器的内部状态，根据原发器来决定保存哪些内部状态							
							
Caretaker（负责人）：负责人又称为管理者，它负责保存备忘录，但是不能对备忘录的内容进行操作或检查。							
							
备忘录模式并不难，但关键在于如何设计备忘录类和负责人类。由于在备忘录中存储的是原发器的中间状态，
因此需要防止原发器以外的其他对象访问备忘录，特别是不允许其他对象来修改备忘录。							
							
 在设计备忘录类时需要考虑其封装性，除了Originator类，不允许其他类来调用备忘录类Memento的构造函数与相关方法，							

在使用Java语言实现备忘录模式时，一般通过将Memento类与Originator类定义在同一个包(package)中来实现封装，
在Java语言中可使用默认访问标识符来定义Memento类，即保证其包内可见。

在Java语言中可以将原发器类和备忘录类放在一个包中，让它们之间满足默认的包内可见性，
也可以将备忘录类作为原发器类的内部类，使得只有原发器才可以访问备忘录中的数据，其他对象都无法使用备忘录中的数据。

1.主要优点
备忘录模式的主要优点如下：
(1)它提供了一种状态恢复的实现机制，使得用户可以方便地回到一个特定的历史步骤，
当新的状态无效或者存在问题时，可以使用暂时存储起来的备忘录将状态复原。
(2)备忘录实现了对信息的封装，一个备忘录对象是一种原发器对象状态的表示，不会被其他代码所改动。
备忘录保存了原发器的状态，采用列表、堆栈等集合来存储备忘录对象可以实现多次撤销操作。
 
2.主要缺点
备忘录模式的主要缺点如下：
资源消耗过大，如果需要保存的原发器类的成员变量太多，就不可避免需要占用大量的存储空间，每保存一次对象的状态都需要消耗一定的系统资源。
 
3.适用场景
在以下情况下可以考虑使用备忘录模式：
(1)保存一个对象在某一个时刻的全部状态或部分状态，这样以后需要时它能够恢复到先前的状态，实现撤销操作。
(2)防止外界对象破坏一个对象历史状态的封装性，避免将对象历史状态的实现细节暴露给外界对象。							