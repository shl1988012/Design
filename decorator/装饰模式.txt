
demo1 ---透明装饰模式
透明装饰模式可以让客户端透明地使用装饰之前的对象和装饰之后的对象，无须关心它们的区别，
此外，还可以对一个已装饰过的对象进行多次装饰，得到更为复杂、功能更为强大的对象。
在实现透明装饰模式时，要求具体装饰类的operation()方法覆盖抽象装饰类的operation()方法，
除了调用原有对象的operation()外还需要调用新增的addedBehavior()方法来增加新行为


demo2 -- 半透明装饰模式
有时我们需要单独调用新增的业务方法。
为了能够调用到新增方法，我们不得不用具体装饰类型来定义装饰之后的对象，
而具体构件类型还是可以使用抽象构件类型来定义，这种装饰模式即为半透明装饰模式


总结 ：对于客户端而言，具体构件类型无须关心，是透明的；但是具体装饰类型必须指定，这是不透明的。

 半透明装饰模式可以给系统带来更多的灵活性，设计相对简单，使用起来也非常方便；
 但是其最大的缺点在于不能实现对同一个对象的多次装饰


注意：
1.尽量保持装饰类的接口与被装饰类的接口相同
2.尽量保持具体构件类ConcreteComponent是一个“轻”类，也就是说不要把太多的行为放在具体构件类中，我们可以通过装饰类对其进行扩展。
3 如果只有一个具体构件类，那么抽象装饰类可以作为该具体构件类的直接子类。

优点：
(1) 对于扩展一个对象的功能，装饰模式比继承更加灵活性，不会导致类的个数急剧增加。
(2) 可以通过一种动态的方式来扩展一个对象的功能。
(3) 可以对一个对象进行多次装饰，通过使用不同的具体装饰类以及这些装饰类的排列组合，可以创造出很多不同行为的组合，得到功能更为强大的对象。
(4) 具体构件类与具体装饰类可以独立变化，用户可以根据需要增加新的具体构件类和具体装饰类，原有类库代码无须改变，符合“开闭原则”。


缺点：
(1) 使用装饰模式进行系统设计时将产生很多小对象，这些对象的区别在于它们之间相互连接的方式有所不同，而不是它们的类或者属性值有所不同，
	大量小对象的产生势必会占用更多的系统资源，在一定程序上影响程序的性能。
(2) 装饰模式提供了一种比继承更加灵活机动的解决方案，但同时也意味着比继承更加易于出错，排错也很困难，
	对于多次装饰的对象，调试时寻找错误可能需要逐级排查，较为繁琐。


适用场景：

(1) 在不影响其他对象的情况下，以动态、透明的方式给单个对象添加职责。
(2) 当不能采用继承的方式对系统进行扩展或者采用继承不利于系统扩展和维护时可以使用装饰模式。
不能采用继承的情况主要有两类：
	第一类是系统中存在大量独立的扩展，为支持每一种扩展或者扩展之间的组合将产生大量的子类，使得子类数目呈爆炸性增长；
	第二类是因为类已定义为不能被继承（如Java语言中的final类）









